                              Contact Management System               

             Basic commands
    1 create a new project - ng new contact_app
    2 to run a project - ng serve --open
    3 create a new component - ng g c component_name
    4 create a service  - ng g s service_name
    5 create pipe - ng g p pipe_folder/pipe_name
    
------------------------------------------------------------------------------------------------

            Basic Building Blocks

    1 Module- Used to add 3rd party libraries
    2 Component- To create html pages(html,css,ts)
    3 Selector- Used to replace the html corresponding to the component
    4 Services- Reusable codes that can be shared between components
    5 Asynchronous function  rxjs 
    6 Dependance injection - Data share between two dependent classes 


----------------------------------------------------------------------------------------------

                              Contact Management System

    
    1 create a new project - ng new contact_app
    2 cd contact_app
    3 code .
    4 to run a project - ng serve --open
    5 install bootstrap, fontawesome and google fonts
        -->npm i bootstrap
        -->npm i @fortawesome/fontawesome-fortawesome
    6 config bootstrap, fontawesome and google fonts in Angular.json
    7 Create components
            -->contactManager - To view all contacts
                    --ng g c contactManager
            -->addContact - To add new contact
                    --ng g c addContact
            -->updateContact - To update contact
                    --ng g c updateContact
            -->viewContact - To view all contacts
                    --ng g c viewContact
            --> page not found create and design
            -->Navigation bar 
                    -- ng g c navbar            
            -->contact manager - page design
            -->view, update and add page design
    8 API creation
       --> create your own json file
       --> go to json placeholder site - create My json server
    9 create folder for backend
       --> create server folder inside the project - /src/server folder
       --> create db.json file in server folder
       --> add our own content to db.json file
    10 In server folder create package.json 
       --> create package.json file - npm  init
       --> create json server - npm i json-server
       --> npm start 
                it will show an error then,
                update package.json file script as 
                "scripts": {
                 "start":"json-server --watch db.json --port 3000"
                 },
                 -->npm start
    11 Create Model for contact and group
        -->create model folder in src folder
        -->create myContact.ts file
        -->create myGroup.ts file
    12 fetch data - Asynchronous Resolving
        JS                                      TS
      
      promise                                 observable
      fetch('url')                            rxjs library  
      .then()                                 .subscribe()

     13 APIs creation
        eg: view contact
            update contact
     14 Service creation
        Pass data from one component to another
        If components share same data then we create Service 

        ng g s services/api

     15 To get http methods  - get, post, put, patch, delete
        import HttpClientModule in app.module.ts  import:[HttpClientModule]
        also add this--(import {HttpClientModule} from '@angular/common/http')

     16 Dependancy inject httpClient in API services 

     17 Data Binding 
                Data sharing inside a component 

                HTML(view) --> TS(component)
                TS --> HTML

        1)one way data binding 
           a)component to view (ts-->html)

               i)String Interpolation - {{variable_name}} 
               ii)Property Binding   - [attribute]="property_name"
           
           b)view to component (html-->ts)

                i)Event Binding - (event)="function_name"
                ii)Event Binding using $event - (event)="function_name($event)"
        2)Two way data binding
                i)ngModel
                -import FormsModule in appModule
                -[(ngModel)]="property_name"
     18 Directives - To manipulate DOM content 

        1)Component directives
        2)Structural directives - To add or remove html elements based on some conditions

                i) *ngIf="Condition"
                ii) *ngFor="let var_name of array_name"

     19 Activated Route //class - viewContact - to pass id to the url
        Provides access to information about a route associated with a component that is loaded in an outlet.
        Use to traverse the RouterState tree and extract information from nodes.

        params  -- Observable<Params>	//params - //method
                --An observable of the matrix parameters scoped to this route.

     20 Angular Pipes - Use pipes to transform strings, currency amounts, dates, and other data for display.
        Pipes are simple functions to use in template expressions to accept an input value and return a transformed value

        eg:dates

        create a pipe for searching

        ng g p pipe_folder/pipe_name

        ng g p pipes/filter




    
